(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('ngx-highlight-js', ['exports', '@angular/core', '@angular/common', '@angular/forms'], factory) :
    (factory((global['ngx-highlight-js'] = {}),global.ng.core,global.ng.common,global.ng.forms));
}(this, (function (exports,core,common,forms) { 'use strict';

    var HighlightJsDirective = /** @class */ (function () {
        function HighlightJsDirective(el, doc) {
            this.el = el;
            this.doc = doc;
        }
        HighlightJsDirective.prototype.escapeHTML = function (str) {
            return (str || '')
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&apos;');
        };
        HighlightJsDirective.prototype.init = function () {
            this.destroy();
            this.codeEl = this.doc.createElement('pre');
            if (this.lang) {
                this.codeEl.className = this.lang;
            }
            this.codeEl.innerHTML =
                this.code || '' + this.el.nativeElement.innerHTML.trim();
            this.parentEl = this.el.nativeElement.parentNode;
            this.parentEl.insertBefore(this.codeEl, this.el.nativeElement.nextSibling);
            hljs.configure(Object.assign({}, this.options));
            hljs.highlightBlock(this.codeEl);
        };
        HighlightJsDirective.prototype.destroy = function () {
            if (this.codeEl) {
                this.parentEl.removeChild(this.codeEl);
                this.codeEl = null;
            }
        };
        HighlightJsDirective.prototype.ngOnInit = function () {
            this.init();
        };
        HighlightJsDirective.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (this.ngModel) {
                this.ngModel.valueChanges.subscribe(function (res) {
                    _this.code = _this.escapeHTML(res);
                    _this.init();
                });
            }
            else {
                this.initMutation();
            }
        };
        HighlightJsDirective.prototype.ngOnDestroy = function () {
            this.destroy();
            this.destroyMutation();
        };
        HighlightJsDirective.prototype.initMutation = function () {
            if (typeof MutationObserver === 'undefined')
                return;
            this.observer = new MutationObserver(this.init.bind(this));
            this.observer.observe(this.el.nativeElement, {
                characterData: true,
                childList: true,
                subtree: true,
            });
        };
        HighlightJsDirective.prototype.destroyMutation = function () {
            if (!this.observer)
                return;
            this.observer.disconnect();
        };
        HighlightJsDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[highlight-js]',
                        host: {
                            style: 'display:none;',
                        },
                    },] }
        ];
        /** @nocollapse */
        HighlightJsDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }
            ];
        };
        HighlightJsDirective.propDecorators = {
            options: [{ type: core.Input }],
            lang: [{ type: core.Input }],
            code: [{ type: core.Input }],
            ngModel: [{ type: core.ContentChild, args: [forms.NgModel,] }]
        };
        return HighlightJsDirective;
    }());

    var HighlightJsModule = /** @class */ (function () {
        function HighlightJsModule() {
        }
        HighlightJsModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [forms.FormsModule],
                        declarations: [HighlightJsDirective],
                        exports: [HighlightJsDirective]
                    },] }
        ];
        return HighlightJsModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.HighlightJsDirective = HighlightJsDirective;
    exports.HighlightJsModule = HighlightJsModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWhpZ2hsaWdodC1qcy51bWQuanMubWFwIiwic291cmNlcyI6WyJuZzovL25neC1oaWdobGlnaHQtanMvc3JjL2hpZ2hsaWdodC1qcy5kaXJlY3RpdmUudHMiLCJuZzovL25neC1oaWdobGlnaHQtanMvc3JjL2hpZ2hsaWdodC1qcy5tb2R1bGUudHMiLCJuZzovL25neC1oaWdobGlnaHQtanMvbmd4LWhpZ2hsaWdodC1qcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIERpcmVjdGl2ZSxcclxuICBFbGVtZW50UmVmLFxyXG4gIElucHV0LFxyXG4gIE9uSW5pdCxcclxuICBPbkRlc3Ryb3ksXHJcbiAgQ29udGVudENoaWxkLFxyXG4gIEFmdGVyVmlld0luaXQsXHJcbiAgSW5qZWN0LFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IE5nTW9kZWwgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcblxyXG5kZWNsYXJlIGNvbnN0IGhsanM6IGFueTtcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2hpZ2hsaWdodC1qc10nLFxyXG4gIGhvc3Q6IHtcclxuICAgIHN0eWxlOiAnZGlzcGxheTpub25lOycsXHJcbiAgfSxcclxufSlcclxuZXhwb3J0IGNsYXNzIEhpZ2hsaWdodEpzRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xyXG4gIEBJbnB1dCgpXHJcbiAgb3B0aW9uczogYW55O1xyXG4gIEBJbnB1dCgpXHJcbiAgbGFuZzogc3RyaW5nO1xyXG4gIEBJbnB1dCgpXHJcbiAgY29kZTogc3RyaW5nO1xyXG4gIEBDb250ZW50Q2hpbGQoTmdNb2RlbClcclxuICBwcml2YXRlIHJlYWRvbmx5IG5nTW9kZWw6IE5nTW9kZWw7XHJcblxyXG4gIHByb3RlY3RlZCBjb2RlRWw6IGFueTtcclxuICBwcm90ZWN0ZWQgcGFyZW50RWw6IGFueTtcclxuXHJcbiAgcHJpdmF0ZSBlc2NhcGVIVE1MKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHJldHVybiAoc3RyIHx8ICcnKVxyXG4gICAgICAucmVwbGFjZSgvJi9nLCAnJmFtcDsnKVxyXG4gICAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXHJcbiAgICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcclxuICAgICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKVxyXG4gICAgICAucmVwbGFjZSgvJy9nLCAnJmFwb3M7Jyk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGluaXQoKSB7XHJcbiAgICB0aGlzLmRlc3Ryb3koKTtcclxuICAgIHRoaXMuY29kZUVsID0gdGhpcy5kb2MuY3JlYXRlRWxlbWVudCgncHJlJyk7XHJcbiAgICBpZiAodGhpcy5sYW5nKSB7XHJcbiAgICAgIHRoaXMuY29kZUVsLmNsYXNzTmFtZSA9IHRoaXMubGFuZztcclxuICAgIH1cclxuICAgIHRoaXMuY29kZUVsLmlubmVySFRNTCA9XHJcbiAgICAgIHRoaXMuY29kZSB8fCAnJyArIHRoaXMuZWwubmF0aXZlRWxlbWVudC5pbm5lckhUTUwudHJpbSgpO1xyXG4gICAgdGhpcy5wYXJlbnRFbCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5wYXJlbnROb2RlO1xyXG4gICAgdGhpcy5wYXJlbnRFbC5pbnNlcnRCZWZvcmUodGhpcy5jb2RlRWwsIHRoaXMuZWwubmF0aXZlRWxlbWVudC5uZXh0U2libGluZyk7XHJcblxyXG4gICAgaGxqcy5jb25maWd1cmUoT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5vcHRpb25zKSk7XHJcbiAgICBobGpzLmhpZ2hsaWdodEJsb2NrKHRoaXMuY29kZUVsKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZGVzdHJveSgpIHtcclxuICAgIGlmICh0aGlzLmNvZGVFbCkge1xyXG4gICAgICB0aGlzLnBhcmVudEVsLnJlbW92ZUNoaWxkKHRoaXMuY29kZUVsKTtcclxuICAgICAgdGhpcy5jb2RlRWwgPSBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2M6IGFueSkge31cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLmluaXQoKTtcclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLm5nTW9kZWwpIHtcclxuICAgICAgdGhpcy5uZ01vZGVsLnZhbHVlQ2hhbmdlcy5zdWJzY3JpYmUocmVzID0+IHtcclxuICAgICAgICB0aGlzLmNvZGUgPSB0aGlzLmVzY2FwZUhUTUwocmVzKTtcclxuICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmluaXRNdXRhdGlvbigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICB0aGlzLmRlc3Ryb3koKTtcclxuICAgIHRoaXMuZGVzdHJveU11dGF0aW9uKCk7XHJcbiAgfVxyXG5cclxuICAvLyAjcmVnaW9uIE11dGF0aW9uXHJcblxyXG4gIHByaXZhdGUgb2JzZXJ2ZXI6IE11dGF0aW9uT2JzZXJ2ZXI7XHJcbiAgcHJpdmF0ZSBpbml0TXV0YXRpb24oKSB7XHJcbiAgICBpZiAodHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgPT09ICd1bmRlZmluZWQnKSByZXR1cm47XHJcbiAgICB0aGlzLm9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIodGhpcy5pbml0LmJpbmQodGhpcykpO1xyXG4gICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwge1xyXG4gICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxyXG4gICAgICBjaGlsZExpc3Q6IHRydWUsXHJcbiAgICAgIHN1YnRyZWU6IHRydWUsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZGVzdHJveU11dGF0aW9uKCkge1xyXG4gICAgaWYgKCF0aGlzLm9ic2VydmVyKSByZXR1cm47XHJcbiAgICB0aGlzLm9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcclxuICB9XHJcblxyXG4gIC8vICNlbmRyZWdpb25uXHJcbn1cclxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgSGlnaGxpZ2h0SnNEaXJlY3RpdmUgfSBmcm9tICcuL2hpZ2hsaWdodC1qcy5kaXJlY3RpdmUnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbRm9ybXNNb2R1bGVdLFxuICBkZWNsYXJhdGlvbnM6IFtIaWdobGlnaHRKc0RpcmVjdGl2ZV0sXG4gIGV4cG9ydHM6IFtIaWdobGlnaHRKc0RpcmVjdGl2ZV1cbn0pXG5leHBvcnQgY2xhc3MgSGlnaGxpZ2h0SnNNb2R1bGUge1xufVxuIiwiLyoqXG4gKiBHZW5lcmF0ZWQgYnVuZGxlIGluZGV4LiBEbyBub3QgZWRpdC5cbiAqL1xuXG5leHBvcnQgKiBmcm9tICcuL2luZGV4JztcbiJdLCJuYW1lcyI6WyJEaXJlY3RpdmUiLCJFbGVtZW50UmVmIiwiSW5qZWN0IiwiRE9DVU1FTlQiLCJJbnB1dCIsIkNvbnRlbnRDaGlsZCIsIk5nTW9kZWwiLCJOZ01vZHVsZSIsIkZvcm1zTW9kdWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O1FBaUVFLDhCQUFvQixFQUFjLEVBQTRCLEdBQVE7WUFBbEQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtZQUE0QixRQUFHLEdBQUgsR0FBRyxDQUFLO1NBQUk7UUEvQmxFLHlDQUFVLEdBQWxCLFVBQW1CLEdBQVc7WUFDNUIsT0FBTyxDQUFDLEdBQUcsSUFBSSxFQUFFO2lCQUNkLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO2lCQUN0QixPQUFPLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQztpQkFDckIsT0FBTyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUM7aUJBQ3JCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO2lCQUN2QixPQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQzVCO1FBRU8sbUNBQUksR0FBWjtZQUNFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNmLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDNUMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNiLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDbkM7WUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVM7Z0JBQ25CLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUMzRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQztZQUNqRCxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRTNFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDaEQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDbEM7UUFFTyxzQ0FBTyxHQUFmO1lBQ0UsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNmLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7YUFDcEI7U0FDRjtRQUlELHVDQUFRLEdBQVI7WUFDRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDYjtRQUVELDhDQUFlLEdBQWY7WUFBQSxpQkFTQztZQVJDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLFVBQUEsR0FBRztvQkFDckMsS0FBSSxDQUFDLElBQUksR0FBRyxLQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUNqQyxLQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7aUJBQ2IsQ0FBQyxDQUFDO2FBQ0o7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO2FBQ3JCO1NBQ0Y7UUFFRCwwQ0FBVyxHQUFYO1lBQ0UsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2YsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQ3hCO1FBS08sMkNBQVksR0FBcEI7WUFDRSxJQUFJLE9BQU8sZ0JBQWdCLEtBQUssV0FBVztnQkFBRSxPQUFPO1lBQ3BELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzNELElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFO2dCQUMzQyxhQUFhLEVBQUUsSUFBSTtnQkFDbkIsU0FBUyxFQUFFLElBQUk7Z0JBQ2YsT0FBTyxFQUFFLElBQUk7YUFDZCxDQUFDLENBQUM7U0FDSjtRQUVPLDhDQUFlLEdBQXZCO1lBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRO2dCQUFFLE9BQU87WUFDM0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUM1Qjs7b0JBeEZGQSxjQUFTLFNBQUM7d0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjt3QkFDMUIsSUFBSSxFQUFFOzRCQUNKLEtBQUssRUFBRSxlQUFlO3lCQUN2QjtxQkFDRjs7Ozs7d0JBbEJDQyxlQUFVO3dEQStEMkJDLFdBQU0sU0FBQ0MsZUFBUTs7Ozs4QkEzQ25EQyxVQUFLOzJCQUVMQSxVQUFLOzJCQUVMQSxVQUFLOzhCQUVMQyxpQkFBWSxTQUFDQyxhQUFPOztRQThFdkIsMkJBQUM7S0EzRkQ7OztRQ1hBO1NBTUM7O29CQU5BQyxhQUFRLFNBQUM7d0JBQ1IsT0FBTyxFQUFFLENBQUNDLGlCQUFXLENBQUM7d0JBQ3RCLFlBQVksRUFBRSxDQUFDLG9CQUFvQixDQUFDO3dCQUNwQyxPQUFPLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztxQkFDaEM7O1FBRUQsd0JBQUM7S0FORDs7SUNKQTs7T0FFRzs7Ozs7Ozs7Ozs7OzsifQ==