import { Directive, ElementRef, Input, ContentChild, Inject, } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { NgModel } from '@angular/forms';
var HighlightJsDirective = /** @class */ (function () {
    function HighlightJsDirective(el, doc) {
        this.el = el;
        this.doc = doc;
    }
    HighlightJsDirective.prototype.escapeHTML = function (str) {
        return (str || '')
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&apos;');
    };
    HighlightJsDirective.prototype.init = function () {
        this.destroy();
        this.codeEl = this.doc.createElement('pre');
        if (this.lang) {
            this.codeEl.className = this.lang;
        }
        this.codeEl.innerHTML =
            this.code || '' + this.el.nativeElement.innerHTML.trim();
        this.parentEl = this.el.nativeElement.parentNode;
        this.parentEl.insertBefore(this.codeEl, this.el.nativeElement.nextSibling);
        hljs.configure(Object.assign({}, this.options));
        hljs.highlightBlock(this.codeEl);
    };
    HighlightJsDirective.prototype.destroy = function () {
        if (this.codeEl) {
            this.parentEl.removeChild(this.codeEl);
            this.codeEl = null;
        }
    };
    HighlightJsDirective.prototype.ngOnInit = function () {
        this.init();
    };
    HighlightJsDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.ngModel) {
            this.ngModel.valueChanges.subscribe(function (res) {
                _this.code = _this.escapeHTML(res);
                _this.init();
            });
        }
        else {
            this.initMutation();
        }
    };
    HighlightJsDirective.prototype.ngOnDestroy = function () {
        this.destroy();
        this.destroyMutation();
    };
    HighlightJsDirective.prototype.initMutation = function () {
        if (typeof MutationObserver === 'undefined')
            return;
        this.observer = new MutationObserver(this.init.bind(this));
        this.observer.observe(this.el.nativeElement, {
            characterData: true,
            childList: true,
            subtree: true,
        });
    };
    HighlightJsDirective.prototype.destroyMutation = function () {
        if (!this.observer)
            return;
        this.observer.disconnect();
    };
    HighlightJsDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[highlight-js]',
                    host: {
                        style: 'display:none;',
                    },
                },] }
    ];
    /** @nocollapse */
    HighlightJsDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    HighlightJsDirective.propDecorators = {
        options: [{ type: Input }],
        lang: [{ type: Input }],
        code: [{ type: Input }],
        ngModel: [{ type: ContentChild, args: [NgModel,] }]
    };
    return HighlightJsDirective;
}());
export { HighlightJsDirective };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LWpzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1oaWdobGlnaHQtanMvIiwic291cmNlcyI6WyJzcmMvaGlnaGxpZ2h0LWpzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBR0wsWUFBWSxFQUVaLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSXpDO0lBa0RFLDhCQUFvQixFQUFjLEVBQTRCLEdBQVE7UUFBbEQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUE0QixRQUFHLEdBQUgsR0FBRyxDQUFLO0lBQUcsQ0FBQztJQS9CbEUseUNBQVUsR0FBbEIsVUFBbUIsR0FBVztRQUM1QixPQUFPLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQzthQUNmLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO2FBQ3RCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDO2FBQ3JCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDO2FBQ3JCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO2FBQ3ZCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVPLG1DQUFJLEdBQVo7UUFDRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVDLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNiLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDbkM7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVM7WUFDbkIsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzNELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDO1FBQ2pELElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFM0UsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRU8sc0NBQU8sR0FBZjtRQUNFLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztTQUNwQjtJQUNILENBQUM7SUFJRCx1Q0FBUSxHQUFSO1FBQ0UsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELDhDQUFlLEdBQWY7UUFBQSxpQkFTQztRQVJDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsVUFBQSxHQUFHO2dCQUNyQyxLQUFJLENBQUMsSUFBSSxHQUFHLEtBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2pDLEtBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNkLENBQUMsQ0FBQyxDQUFDO1NBQ0o7YUFBTTtZQUNMLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUNyQjtJQUNILENBQUM7SUFFRCwwQ0FBVyxHQUFYO1FBQ0UsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2YsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFLTywyQ0FBWSxHQUFwQjtRQUNFLElBQUksT0FBTyxnQkFBZ0IsS0FBSyxXQUFXO1lBQUUsT0FBTztRQUNwRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRTtZQUMzQyxhQUFhLEVBQUUsSUFBSTtZQUNuQixTQUFTLEVBQUUsSUFBSTtZQUNmLE9BQU8sRUFBRSxJQUFJO1NBQ2QsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLDhDQUFlLEdBQXZCO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRO1lBQUUsT0FBTztRQUMzQixJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzdCLENBQUM7O2dCQXhGRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsSUFBSSxFQUFFO3dCQUNKLEtBQUssRUFBRSxlQUFlO3FCQUN2QjtpQkFDRjs7OztnQkFsQkMsVUFBVTtnREErRDJCLE1BQU0sU0FBQyxRQUFROzs7MEJBM0NuRCxLQUFLO3VCQUVMLEtBQUs7dUJBRUwsS0FBSzswQkFFTCxZQUFZLFNBQUMsT0FBTzs7SUE4RXZCLDJCQUFDO0NBQUEsQUEzRkQsSUEyRkM7U0FyRlksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBEaXJlY3RpdmUsXHJcbiAgRWxlbWVudFJlZixcclxuICBJbnB1dCxcclxuICBPbkluaXQsXHJcbiAgT25EZXN0cm95LFxyXG4gIENvbnRlbnRDaGlsZCxcclxuICBBZnRlclZpZXdJbml0LFxyXG4gIEluamVjdCxcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBOZ01vZGVsIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxuZGVjbGFyZSBjb25zdCBobGpzOiBhbnk7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1toaWdobGlnaHQtanNdJyxcclxuICBob3N0OiB7XHJcbiAgICBzdHlsZTogJ2Rpc3BsYXk6bm9uZTsnLFxyXG4gIH0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBIaWdobGlnaHRKc0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcclxuICBASW5wdXQoKVxyXG4gIG9wdGlvbnM6IGFueTtcclxuICBASW5wdXQoKVxyXG4gIGxhbmc6IHN0cmluZztcclxuICBASW5wdXQoKVxyXG4gIGNvZGU6IHN0cmluZztcclxuICBAQ29udGVudENoaWxkKE5nTW9kZWwpXHJcbiAgcHJpdmF0ZSByZWFkb25seSBuZ01vZGVsOiBOZ01vZGVsO1xyXG5cclxuICBwcm90ZWN0ZWQgY29kZUVsOiBhbnk7XHJcbiAgcHJvdGVjdGVkIHBhcmVudEVsOiBhbnk7XHJcblxyXG4gIHByaXZhdGUgZXNjYXBlSFRNTChzdHI6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gKHN0ciB8fCAnJylcclxuICAgICAgLnJlcGxhY2UoLyYvZywgJyZhbXA7JylcclxuICAgICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxyXG4gICAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXHJcbiAgICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JylcclxuICAgICAgLnJlcGxhY2UoLycvZywgJyZhcG9zOycpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbml0KCkge1xyXG4gICAgdGhpcy5kZXN0cm95KCk7XHJcbiAgICB0aGlzLmNvZGVFbCA9IHRoaXMuZG9jLmNyZWF0ZUVsZW1lbnQoJ3ByZScpO1xyXG4gICAgaWYgKHRoaXMubGFuZykge1xyXG4gICAgICB0aGlzLmNvZGVFbC5jbGFzc05hbWUgPSB0aGlzLmxhbmc7XHJcbiAgICB9XHJcbiAgICB0aGlzLmNvZGVFbC5pbm5lckhUTUwgPVxyXG4gICAgICB0aGlzLmNvZGUgfHwgJycgKyB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MLnRyaW0oKTtcclxuICAgIHRoaXMucGFyZW50RWwgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucGFyZW50Tm9kZTtcclxuICAgIHRoaXMucGFyZW50RWwuaW5zZXJ0QmVmb3JlKHRoaXMuY29kZUVsLCB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQubmV4dFNpYmxpbmcpO1xyXG5cclxuICAgIGhsanMuY29uZmlndXJlKE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0aW9ucykpO1xyXG4gICAgaGxqcy5oaWdobGlnaHRCbG9jayh0aGlzLmNvZGVFbCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGRlc3Ryb3koKSB7XHJcbiAgICBpZiAodGhpcy5jb2RlRWwpIHtcclxuICAgICAgdGhpcy5wYXJlbnRFbC5yZW1vdmVDaGlsZCh0aGlzLmNvZGVFbCk7XHJcbiAgICAgIHRoaXMuY29kZUVsID0gbnVsbDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jOiBhbnkpIHt9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy5pbml0KCk7XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5uZ01vZGVsKSB7XHJcbiAgICAgIHRoaXMubmdNb2RlbC52YWx1ZUNoYW5nZXMuc3Vic2NyaWJlKHJlcyA9PiB7XHJcbiAgICAgICAgdGhpcy5jb2RlID0gdGhpcy5lc2NhcGVIVE1MKHJlcyk7XHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5pbml0TXV0YXRpb24oKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgdGhpcy5kZXN0cm95KCk7XHJcbiAgICB0aGlzLmRlc3Ryb3lNdXRhdGlvbigpO1xyXG4gIH1cclxuXHJcbiAgLy8gI3JlZ2lvbiBNdXRhdGlvblxyXG5cclxuICBwcml2YXRlIG9ic2VydmVyOiBNdXRhdGlvbk9ic2VydmVyO1xyXG4gIHByaXZhdGUgaW5pdE11dGF0aW9uKCkge1xyXG4gICAgaWYgKHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xyXG4gICAgdGhpcy5vYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXMuaW5pdC5iaW5kKHRoaXMpKTtcclxuICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIHtcclxuICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZSxcclxuICAgICAgY2hpbGRMaXN0OiB0cnVlLFxyXG4gICAgICBzdWJ0cmVlOiB0cnVlLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGRlc3Ryb3lNdXRhdGlvbigpIHtcclxuICAgIGlmICghdGhpcy5vYnNlcnZlcikgcmV0dXJuO1xyXG4gICAgdGhpcy5vYnNlcnZlci5kaXNjb25uZWN0KCk7XHJcbiAgfVxyXG5cclxuICAvLyAjZW5kcmVnaW9ublxyXG59XHJcbiJdfQ==