import { Directive, ElementRef, Input, ContentChild, Inject, NgModule } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { NgModel, FormsModule } from '@angular/forms';

class HighlightJsDirective {
    constructor(el, doc) {
        this.el = el;
        this.doc = doc;
    }
    escapeHTML(str) {
        return (str || '')
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&apos;');
    }
    init() {
        this.destroy();
        this.codeEl = this.doc.createElement('pre');
        if (this.lang) {
            this.codeEl.className = this.lang;
        }
        this.codeEl.innerHTML =
            this.code || '' + this.el.nativeElement.innerHTML.trim();
        this.parentEl = this.el.nativeElement.parentNode;
        this.parentEl.insertBefore(this.codeEl, this.el.nativeElement.nextSibling);
        hljs.configure(Object.assign({}, this.options));
        hljs.highlightBlock(this.codeEl);
    }
    destroy() {
        if (this.codeEl) {
            this.parentEl.removeChild(this.codeEl);
            this.codeEl = null;
        }
    }
    ngOnInit() {
        this.init();
    }
    ngAfterViewInit() {
        if (this.ngModel) {
            this.ngModel.valueChanges.subscribe(res => {
                this.code = this.escapeHTML(res);
                this.init();
            });
        }
        else {
            this.initMutation();
        }
    }
    ngOnDestroy() {
        this.destroy();
        this.destroyMutation();
    }
    initMutation() {
        if (typeof MutationObserver === 'undefined')
            return;
        this.observer = new MutationObserver(this.init.bind(this));
        this.observer.observe(this.el.nativeElement, {
            characterData: true,
            childList: true,
            subtree: true,
        });
    }
    destroyMutation() {
        if (!this.observer)
            return;
        this.observer.disconnect();
    }
}
HighlightJsDirective.decorators = [
    { type: Directive, args: [{
                selector: '[highlight-js]',
                host: {
                    style: 'display:none;',
                },
            },] }
];
/** @nocollapse */
HighlightJsDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
HighlightJsDirective.propDecorators = {
    options: [{ type: Input }],
    lang: [{ type: Input }],
    code: [{ type: Input }],
    ngModel: [{ type: ContentChild, args: [NgModel,] }]
};

class HighlightJsModule {
}
HighlightJsModule.decorators = [
    { type: NgModule, args: [{
                imports: [FormsModule],
                declarations: [HighlightJsDirective],
                exports: [HighlightJsDirective]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { HighlightJsDirective, HighlightJsModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWhpZ2hsaWdodC1qcy5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vbmd4LWhpZ2hsaWdodC1qcy9zcmMvaGlnaGxpZ2h0LWpzLmRpcmVjdGl2ZS50cyIsIm5nOi8vbmd4LWhpZ2hsaWdodC1qcy9zcmMvaGlnaGxpZ2h0LWpzLm1vZHVsZS50cyIsIm5nOi8vbmd4LWhpZ2hsaWdodC1qcy9uZ3gtaGlnaGxpZ2h0LWpzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgRGlyZWN0aXZlLFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgSW5wdXQsXHJcbiAgT25Jbml0LFxyXG4gIE9uRGVzdHJveSxcclxuICBDb250ZW50Q2hpbGQsXHJcbiAgQWZ0ZXJWaWV3SW5pdCxcclxuICBJbmplY3QsXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgTmdNb2RlbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuXHJcbmRlY2xhcmUgY29uc3QgaGxqczogYW55O1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbaGlnaGxpZ2h0LWpzXScsXHJcbiAgaG9zdDoge1xyXG4gICAgc3R5bGU6ICdkaXNwbGF5Om5vbmU7JyxcclxuICB9LFxyXG59KVxyXG5leHBvcnQgY2xhc3MgSGlnaGxpZ2h0SnNEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XHJcbiAgQElucHV0KClcclxuICBvcHRpb25zOiBhbnk7XHJcbiAgQElucHV0KClcclxuICBsYW5nOiBzdHJpbmc7XHJcbiAgQElucHV0KClcclxuICBjb2RlOiBzdHJpbmc7XHJcbiAgQENvbnRlbnRDaGlsZChOZ01vZGVsKVxyXG4gIHByaXZhdGUgcmVhZG9ubHkgbmdNb2RlbDogTmdNb2RlbDtcclxuXHJcbiAgcHJvdGVjdGVkIGNvZGVFbDogYW55O1xyXG4gIHByb3RlY3RlZCBwYXJlbnRFbDogYW55O1xyXG5cclxuICBwcml2YXRlIGVzY2FwZUhUTUwoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIChzdHIgfHwgJycpXHJcbiAgICAgIC5yZXBsYWNlKC8mL2csICcmYW1wOycpXHJcbiAgICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcclxuICAgICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxyXG4gICAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpXHJcbiAgICAgIC5yZXBsYWNlKC8nL2csICcmYXBvczsnKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaW5pdCgpIHtcclxuICAgIHRoaXMuZGVzdHJveSgpO1xyXG4gICAgdGhpcy5jb2RlRWwgPSB0aGlzLmRvYy5jcmVhdGVFbGVtZW50KCdwcmUnKTtcclxuICAgIGlmICh0aGlzLmxhbmcpIHtcclxuICAgICAgdGhpcy5jb2RlRWwuY2xhc3NOYW1lID0gdGhpcy5sYW5nO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jb2RlRWwuaW5uZXJIVE1MID1cclxuICAgICAgdGhpcy5jb2RlIHx8ICcnICsgdGhpcy5lbC5uYXRpdmVFbGVtZW50LmlubmVySFRNTC50cmltKCk7XHJcbiAgICB0aGlzLnBhcmVudEVsID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnBhcmVudE5vZGU7XHJcbiAgICB0aGlzLnBhcmVudEVsLmluc2VydEJlZm9yZSh0aGlzLmNvZGVFbCwgdGhpcy5lbC5uYXRpdmVFbGVtZW50Lm5leHRTaWJsaW5nKTtcclxuXHJcbiAgICBobGpzLmNvbmZpZ3VyZShPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMpKTtcclxuICAgIGhsanMuaGlnaGxpZ2h0QmxvY2sodGhpcy5jb2RlRWwpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBkZXN0cm95KCkge1xyXG4gICAgaWYgKHRoaXMuY29kZUVsKSB7XHJcbiAgICAgIHRoaXMucGFyZW50RWwucmVtb3ZlQ2hpbGQodGhpcy5jb2RlRWwpO1xyXG4gICAgICB0aGlzLmNvZGVFbCA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvYzogYW55KSB7fVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMuaW5pdCgpO1xyXG4gIH1cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMubmdNb2RlbCkge1xyXG4gICAgICB0aGlzLm5nTW9kZWwudmFsdWVDaGFuZ2VzLnN1YnNjcmliZShyZXMgPT4ge1xyXG4gICAgICAgIHRoaXMuY29kZSA9IHRoaXMuZXNjYXBlSFRNTChyZXMpO1xyXG4gICAgICAgIHRoaXMuaW5pdCgpO1xyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuaW5pdE11dGF0aW9uKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGVzdHJveSgpO1xyXG4gICAgdGhpcy5kZXN0cm95TXV0YXRpb24oKTtcclxuICB9XHJcblxyXG4gIC8vICNyZWdpb24gTXV0YXRpb25cclxuXHJcbiAgcHJpdmF0ZSBvYnNlcnZlcjogTXV0YXRpb25PYnNlcnZlcjtcclxuICBwcml2YXRlIGluaXRNdXRhdGlvbigpIHtcclxuICAgIGlmICh0eXBlb2YgTXV0YXRpb25PYnNlcnZlciA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcclxuICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLmluaXQuYmluZCh0aGlzKSk7XHJcbiAgICB0aGlzLm9ic2VydmVyLm9ic2VydmUodGhpcy5lbC5uYXRpdmVFbGVtZW50LCB7XHJcbiAgICAgIGNoYXJhY3RlckRhdGE6IHRydWUsXHJcbiAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcclxuICAgICAgc3VidHJlZTogdHJ1ZSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBkZXN0cm95TXV0YXRpb24oKSB7XHJcbiAgICBpZiAoIXRoaXMub2JzZXJ2ZXIpIHJldHVybjtcclxuICAgIHRoaXMub2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xyXG4gIH1cclxuXHJcbiAgLy8gI2VuZHJlZ2lvbm5cclxufVxyXG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBIaWdobGlnaHRKc0RpcmVjdGl2ZSB9IGZyb20gJy4vaGlnaGxpZ2h0LWpzLmRpcmVjdGl2ZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtGb3Jtc01vZHVsZV0sXG4gIGRlY2xhcmF0aW9uczogW0hpZ2hsaWdodEpzRGlyZWN0aXZlXSxcbiAgZXhwb3J0czogW0hpZ2hsaWdodEpzRGlyZWN0aXZlXVxufSlcbmV4cG9ydCBjbGFzcyBIaWdobGlnaHRKc01vZHVsZSB7XG59XG4iLCIvKipcbiAqIEdlbmVyYXRlZCBidW5kbGUgaW5kZXguIERvIG5vdCBlZGl0LlxuICovXG5cbmV4cG9ydCAqIGZyb20gJy4vaW5kZXgnO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0lBaUVFLFlBQW9CLEVBQWMsRUFBNEIsR0FBUTtRQUFsRCxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQTRCLFFBQUcsR0FBSCxHQUFHLENBQUs7S0FBSTtJQS9CbEUsVUFBVSxDQUFDLEdBQVc7UUFDNUIsT0FBTyxDQUFDLEdBQUcsSUFBSSxFQUFFO2FBQ2QsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7YUFDdEIsT0FBTyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUM7YUFDckIsT0FBTyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUM7YUFDckIsT0FBTyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUM7YUFDdkIsT0FBTyxDQUFD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